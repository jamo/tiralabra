var search_data = {"index":{"searchIndex":["binaryheap","dheap","mynode","node","oldbinomialheap","stack","threeheap","child_index()","child_index_left()","child_index_right()","clear()","clear!()","count()","dec_key()","dec_key()","dec_key()","delete()","empty?()","empty?()","empty?()","get_heap()","get_heap()","get_index_of_biggest_child()","has_bigger_childen?()","heapify()","heapify()","heapify_down()","heapify_up()","inc_key()","inc_key()","inject_heap()","insert()","link()","merge()","min()","new()","new()","new()","new()","new()","new()","new()","not_empty?()","parent_index()","peak()","pop()","print_heap()","print_node()","push()","remove_max()","remove_max()","remove_min()","reverse()","size()","swap()","union()"],"longSearchIndex":["binaryheap","dheap","mynode","node","oldbinomialheap","stack","threeheap","dheap#child_index()","dheap#child_index_left()","dheap#child_index_right()","stack#clear()","dheap#clear!()","stack#count()","binaryheap#dec_key()","dheap#dec_key()","oldbinomialheap#dec_key()","oldbinomialheap#delete()","dheap#empty?()","oldbinomialheap#empty?()","stack#empty?()","binaryheap#get_heap()","dheap#get_heap()","dheap#get_index_of_biggest_child()","dheap#has_bigger_childen?()","binaryheap#heapify()","dheap#heapify()","dheap#heapify_down()","dheap#heapify_up()","binaryheap#inc_key()","dheap#inc_key()","dheap#inject_heap()","oldbinomialheap#insert()","oldbinomialheap#link()","oldbinomialheap#merge()","oldbinomialheap#min()","binaryheap::new()","dheap::new()","mynode::new()","node::new()","oldbinomialheap::new()","stack::new()","threeheap::new()","dheap#not_empty?()","dheap#parent_index()","dheap#peak()","stack#pop()","oldbinomialheap#print_heap()","mynode#print_node()","stack#push()","binaryheap#remove_max()","dheap#remove_max()","oldbinomialheap#remove_min()","oldbinomialheap#reverse()","oldbinomialheap#size()","dheap#swap()","oldbinomialheap#union()"],"info":[["BinaryHeap","","BinaryHeap.html","","<p>Maksimi binäärikeko DRY perjaatteen mukaan ei toisteta mitään koodia\n"],["DHeap","","DHeap.html","",""],["MyNode","","MyNode.html","",""],["Node","","Node.html","",""],["OldBinomialHeap","","OldBinomialHeap.html","",""],["Stack","","Stack.html","",""],["ThreeHeap","","ThreeHeap.html","","<p>DRY perjaatteen mukaisesti ei toisteta ylimääräistä koodia Vaan\nkirjoitetaan kukin asia vain kertaalleen. …\n"],["child_index","DHeap","DHeap.html#method-i-child_index","(index)","<p>Palauttaa lasten indeksivälin jota voidaan hyödyntää lasten läpikäynnisä\nluku..toinen_luku @param [Fixnum] …\n"],["child_index_left","DHeap","DHeap.html#method-i-child_index_left","(index)","<p>Palauttaa vasemmal lapsen indeksin @param [Fixnum] indeksi, jonka lapsen\nindeksi lasketaan\n"],["child_index_right","DHeap","DHeap.html#method-i-child_index_right","(index)","<p>Palauttaa vasemman lapsen indeksin @param [Fixnum]  indeksi, jonka oikea\nindeksi lasketaan\n"],["clear","Stack","Stack.html#method-i-clear","()",""],["clear!","DHeap","DHeap.html#method-i-clear-21","()","<p>Tyhjentää kaikki elementit keosta\n"],["count","Stack","Stack.html#method-i-count","()",""],["dec_key","BinaryHeap","BinaryHeap.html#method-i-dec_key","(new_value, index)",""],["dec_key","DHeap","DHeap.html#method-i-dec_key","(new_value, index)","<p>Pienentää avaimen arvoa tietyssä indeksissä Mikäli uusi arvo on suurempi\nkuin uusi arvo ei tehdä mitään …\n"],["dec_key","OldBinomialHeap","OldBinomialHeap.html#method-i-dec_key","(node, new_value)","<p>@param [Object] node @param [Object] new_value\n"],["delete","OldBinomialHeap","OldBinomialHeap.html#method-i-delete","(node)",""],["empty?","DHeap","DHeap.html#method-i-empty-3F","()","<p>Palautaa tiedon onko keko tyhjä\n"],["empty?","OldBinomialHeap","OldBinomialHeap.html#method-i-empty-3F","()",""],["empty?","Stack","Stack.html#method-i-empty-3F","()",""],["get_heap","BinaryHeap","BinaryHeap.html#method-i-get_heap","()","<p>debuggausta/debuggausta varten - joo ei rubymäinen ratkaisu   ja ihan\nturha…\n"],["get_heap","DHeap","DHeap.html#method-i-get_heap","()","<p>Palauttaa viitteen kekon taulukkoon\n"],["get_index_of_biggest_child","DHeap","DHeap.html#method-i-get_index_of_biggest_child","(index)","<p>Palauttaa suurimman lapsen indeksin @param [Fixnum] index, indeksi\n"],["has_bigger_childen?","DHeap","DHeap.html#method-i-has_bigger_childen-3F","(index)","<p>Katsotaan onko indeksissä olevalla itseään suurempia lapsia Hyödynnetään\nkekoehdon ylläpidossa @param …\n"],["heapify","BinaryHeap","BinaryHeap.html#method-i-heapify","(seed)","\n<pre>Lisää kekoon arvoja/alkioita\nMikään ei perjaatteessa rajoita keossa olevien asioiden tyyppiä,\nkunhan ...</pre>\n"],["heapify","DHeap","DHeap.html#method-i-heapify","(*seed)","\n<pre>Metodi, joka lisää alkioita heap taulukkoon.\nVoidaan kutsua myös sorituksen aikana.</pre>\n<p>@param [Array]  n …\n"],["heapify_down","DHeap","DHeap.html#method-i-heapify_down","(index)","<p>Tarkistaa ja tarvittaessa korjaa kekoehdon paremetrina saadusa indeksillä\nolevassa arvossa. Kutsuttaessa …\n"],["heapify_up","DHeap","DHeap.html#method-i-heapify_up","(index)","<p>Korjataan kekoehto/tarkastetaan sen olemassaolo @param [Fixnum] index\nindeksi josta alaspäin kekoehto …\n"],["inc_key","BinaryHeap","BinaryHeap.html#method-i-inc_key","(new_value, index)",""],["inc_key","DHeap","DHeap.html#method-i-inc_key","(new_value, index)","<p>Kasvattaa avaimen arvoa tietyssä indeksissä Mikäli uusi arvo on pienempi\nkuin uusi arvo ei tehdä mitään …\n"],["inject_heap","DHeap","DHeap.html#method-i-inject_heap","(new_heap)","<p>Asettaa keon taulukoksi parametrina annetun taulukon Tämä olettaa että\ntaulukko noudattaa kyseisen keon …\n"],["insert","OldBinomialHeap","OldBinomialHeap.html#method-i-insert","(value, key)",""],["link","OldBinomialHeap","OldBinomialHeap.html#method-i-link","(node1, node2)",""],["merge","OldBinomialHeap","OldBinomialHeap.html#method-i-merge","(h1, h2)",""],["min","OldBinomialHeap","OldBinomialHeap.html#method-i-min","()",""],["new","BinaryHeap","BinaryHeap.html#method-c-new","()","<p>Alustetaan binäärikeko\n"],["new","DHeap","DHeap.html#method-c-new","(d)","<p>Alustetaan keon oleellisimat komponentit\n\n<pre>@param [Fixnum]  lasten määrä</pre>\n"],["new","MyNode","MyNode.html#method-c-new","(data, key)",""],["new","Node","Node.html#method-c-new","(key)",""],["new","OldBinomialHeap","OldBinomialHeap.html#method-c-new","(*args)",""],["new","Stack","Stack.html#method-c-new","()",""],["new","ThreeHeap","ThreeHeap.html#method-c-new","()","<p>Alustaa kolmikeon\n"],["not_empty?","DHeap","DHeap.html#method-i-not_empty-3F","()","<p>Palauttaa tiedon onko keko ei tyhjä\n"],["parent_index","DHeap","DHeap.html#method-i-parent_index","(index)","<p>Palauttaa parentin indexin\n<p>@param [Fixnum]  parentin indeksin laskentaan\n"],["peak","DHeap","DHeap.html#method-i-peak","()","<p>Näyttää mitä indeksissä 0 on palauttaa nil jos taulukko on tyhjä\n"],["pop","Stack","Stack.html#method-i-pop","()",""],["print_heap","OldBinomialHeap","OldBinomialHeap.html#method-i-print_heap","()",""],["print_node","MyNode","MyNode.html#method-i-print_node","()",""],["push","Stack","Stack.html#method-i-push","(item)",""],["remove_max","BinaryHeap","BinaryHeap.html#method-i-remove_max","()",""],["remove_max","DHeap","DHeap.html#method-i-remove_max","()","<p>Poistaa ja palauttaa suurimman arvon omaavan elementin keosta Huolehtii\nkekoehdon toiminnasta\n"],["remove_min","OldBinomialHeap","OldBinomialHeap.html#method-i-remove_min","()",""],["reverse","OldBinomialHeap","OldBinomialHeap.html#method-i-reverse","(node)",""],["size","OldBinomialHeap","OldBinomialHeap.html#method-i-size","()",""],["swap","DHeap","DHeap.html#method-i-swap","(first_index, second_index)","<p>Vaihtaa kahden elementin paikan @param [Fixnum] ekan indeksi @param\n[Fixnum] tokan indeksi. Näiden indeksien …\n"],["union","OldBinomialHeap","OldBinomialHeap.html#method-i-union","(h1, h2)",""]]}}