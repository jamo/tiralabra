var search_data = {"index":{"searchIndex":["binaryheap","binomialheap","dheap","mynode","node","oldbinomialheap","stack","child_index()","child_index_left()","child_index_right()","clear()","clear!()","count()","dec_key()","dec_key()","dec_key()","dec_key()","delete()","delete()","empty?()","empty?()","empty?()","extract_min()","get_heap()","get_index_of_biggest_child()","has_bigger_childen?()","heapify()","heapify()","heapify_down()","heapify_up()","inc_key()","inc_key()","inject_heap()","insert()","insert()","link()","link()","make_heap()","merge()","merge()","min()","minimum()","new()","new()","new()","new()","new()","new()","new()","not_empty?()","parent_index()","peak()","pop()","print_heap()","print_node()","push()","remove_max()","remove_max()","remove_min()","reverse()","size()","swap()","union()","union()"],"longSearchIndex":["binaryheap","binomialheap","dheap","mynode","node","oldbinomialheap","stack","dheap#child_index()","dheap#child_index_left()","dheap#child_index_right()","stack#clear()","dheap#clear!()","stack#count()","binaryheap#dec_key()","binomialheap#dec_key()","dheap#dec_key()","oldbinomialheap#dec_key()","binomialheap#delete()","oldbinomialheap#delete()","dheap#empty?()","oldbinomialheap#empty?()","stack#empty?()","binomialheap#extract_min()","binaryheap#get_heap()","dheap#get_index_of_biggest_child()","dheap#has_bigger_childen?()","binaryheap#heapify()","dheap#heapify()","dheap#heapify_down()","dheap#heapify_up()","binaryheap#inc_key()","dheap#inc_key()","dheap#inject_heap()","binomialheap#insert()","oldbinomialheap#insert()","binomialheap#link()","oldbinomialheap#link()","binomialheap#make_heap()","binomialheap#merge()","oldbinomialheap#merge()","oldbinomialheap#min()","binomialheap#minimum()","binaryheap::new()","binomialheap::new()","dheap::new()","mynode::new()","node::new()","oldbinomialheap::new()","stack::new()","dheap#not_empty?()","dheap#parent_index()","dheap#peak()","stack#pop()","oldbinomialheap#print_heap()","mynode#print_node()","stack#push()","binaryheap#remove_max()","dheap#remove_max()","oldbinomialheap#remove_min()","oldbinomialheap#reverse()","oldbinomialheap#size()","dheap#swap()","binomialheap#union()","oldbinomialheap#union()"],"info":[["BinaryHeap","","BinaryHeap.html","",""],["BinomialHeap","","BinomialHeap.html","",""],["DHeap","","DHeap.html","",""],["MyNode","","MyNode.html","",""],["Node","","Node.html","",""],["OldBinomialHeap","","OldBinomialHeap.html","",""],["Stack","","Stack.html","",""],["child_index","DHeap","DHeap.html#method-i-child_index","(index)",""],["child_index_left","DHeap","DHeap.html#method-i-child_index_left","(index)",""],["child_index_right","DHeap","DHeap.html#method-i-child_index_right","(index)",""],["clear","Stack","Stack.html#method-i-clear","()",""],["clear!","DHeap","DHeap.html#method-i-clear-21","()",""],["count","Stack","Stack.html#method-i-count","()",""],["dec_key","BinaryHeap","BinaryHeap.html#method-i-dec_key","(new_value, index)",""],["dec_key","BinomialHeap","BinomialHeap.html#method-i-dec_key","(x, k)","<p>pseudon mukainen\n"],["dec_key","DHeap","DHeap.html#method-i-dec_key","(new_value, index)",""],["dec_key","OldBinomialHeap","OldBinomialHeap.html#method-i-dec_key","(node, new_value)","<p>@param [Object] node @param [Object] new_value\n"],["delete","BinomialHeap","BinomialHeap.html#method-i-delete","(x)",""],["delete","OldBinomialHeap","OldBinomialHeap.html#method-i-delete","(node)",""],["empty?","DHeap","DHeap.html#method-i-empty-3F","()",""],["empty?","OldBinomialHeap","OldBinomialHeap.html#method-i-empty-3F","()",""],["empty?","Stack","Stack.html#method-i-empty-3F","()",""],["extract_min","BinomialHeap","BinomialHeap.html#method-i-extract_min","()","<p>pseudomainen TODO\n"],["get_heap","BinaryHeap","BinaryHeap.html#method-i-get_heap","()","<p>debuggausta/debuggausta varten - joo ei rubymäinen ratkaisu   ja ihan\nturha…\n"],["get_index_of_biggest_child","DHeap","DHeap.html#method-i-get_index_of_biggest_child","(index)",""],["has_bigger_childen?","DHeap","DHeap.html#method-i-has_bigger_childen-3F","(index)",""],["heapify","BinaryHeap","BinaryHeap.html#method-i-heapify","(seed)","\n<pre>Lisää kekoon arvoja/alkioita\nMikään ei perjaatteessa rajoita keossa olevien asioiden tyyppiä,\nkunhan ...</pre>\n"],["heapify","DHeap","DHeap.html#method-i-heapify","(*seed)",""],["heapify_down","DHeap","DHeap.html#method-i-heapify_down","(index)",""],["heapify_up","DHeap","DHeap.html#method-i-heapify_up","(index)","<p>Korjataan kekoehto/tarkastetaan sen olemassaolo @param [Fixnum] index\nindeksi josta alaspäin kekoehto …\n"],["inc_key","BinaryHeap","BinaryHeap.html#method-i-inc_key","(new_value, index)",""],["inc_key","DHeap","DHeap.html#method-i-inc_key","(new_value, index)",""],["inject_heap","DHeap","DHeap.html#method-i-inject_heap","(new_heap)",""],["insert","BinomialHeap","BinomialHeap.html#method-i-insert","(x)","<p>pseudon mukainen\n"],["insert","OldBinomialHeap","OldBinomialHeap.html#method-i-insert","(value, key)",""],["link","BinomialHeap","BinomialHeap.html#method-i-link","(y, z)","<p>pseudon mukainen\n"],["link","OldBinomialHeap","OldBinomialHeap.html#method-i-link","(node1, node2)",""],["make_heap","BinomialHeap","BinomialHeap.html#method-i-make_heap","()",""],["merge","BinomialHeap","BinomialHeap.html#method-i-merge","(h1, h2)",""],["merge","OldBinomialHeap","OldBinomialHeap.html#method-i-merge","(h1, h2)",""],["min","OldBinomialHeap","OldBinomialHeap.html#method-i-min","()",""],["minimum","BinomialHeap","BinomialHeap.html#method-i-minimum","()","<p>pseudon mukainen\n"],["new","BinaryHeap","BinaryHeap.html#method-c-new","()",""],["new","BinomialHeap","BinomialHeap.html#method-c-new","(*args)",""],["new","DHeap","DHeap.html#method-c-new","(d)","<p>Luodaan keon oleellisimat komponentit @@param d mikä keko tehdään\n"],["new","MyNode","MyNode.html#method-c-new","(data, key)",""],["new","Node","Node.html#method-c-new","(key)",""],["new","OldBinomialHeap","OldBinomialHeap.html#method-c-new","(*args)",""],["new","Stack","Stack.html#method-c-new","()",""],["not_empty?","DHeap","DHeap.html#method-i-not_empty-3F","()",""],["parent_index","DHeap","DHeap.html#method-i-parent_index","(index)","<p>def parent i   #Jääkööt tähän, vaikkakin turha\n\n<pre>@heap[parent_index i]</pre>\n<p>end\n"],["peak","DHeap","DHeap.html#method-i-peak","()",""],["pop","Stack","Stack.html#method-i-pop","()",""],["print_heap","OldBinomialHeap","OldBinomialHeap.html#method-i-print_heap","()",""],["print_node","MyNode","MyNode.html#method-i-print_node","()",""],["push","Stack","Stack.html#method-i-push","(item)",""],["remove_max","BinaryHeap","BinaryHeap.html#method-i-remove_max","()",""],["remove_max","DHeap","DHeap.html#method-i-remove_max","()",""],["remove_min","OldBinomialHeap","OldBinomialHeap.html#method-i-remove_min","()",""],["reverse","OldBinomialHeap","OldBinomialHeap.html#method-i-reverse","(node)",""],["size","OldBinomialHeap","OldBinomialHeap.html#method-i-size","()",""],["swap","DHeap","DHeap.html#method-i-swap","(first_index, second_index)",""],["union","BinomialHeap","BinomialHeap.html#method-i-union","(h1, h2)","<p>pseudon mukainen\n"],["union","OldBinomialHeap","OldBinomialHeap.html#method-i-union","(h1, h2)",""]]}}